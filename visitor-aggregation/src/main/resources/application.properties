server.port=${SERVER_PORT:8000}

eureka.client.serviceUrl.defaultZone=${EUREKA_SERVER_URI:http://192.168.1.11:8761/eureka/}
eureka.client.healthcheck.enabled=true

## Aggregation configuration
# spring.cloud.stream.kafka.streams.binder.brokers=${BROKERS:192.168.1.11:9092}
# spring.cloud.stream.kafka.streams.binder.configuration.default.value.serde = org.apache.kafka.common.serialization.Serdes$StringSerde
# spring.cloud.stream.kafka.streams.binder.configuration.default.key.serde = org.apache.kafka.common.serialization.Serdes$StringSerde
# In
# spring.cloud.stream.bindings.dayAggregationInput.destination=${AGGREGATION_INPUT_TOPIC:facedetection}
# spring.cloud.stream.bindings.dayAggregationInput.group=${AGGREGATION_CONSUMER_GROUP:visitor_day_aggregation}
# Out
# spring.cloud.stream.bindings.dayAggregationOutput.destination=${AGGREGATION_OUTPUT_TOPIC:visitor_day_count}
# spring.cloud.stream.bindings.dayAggregationOutput.content-type = application/json
# spring.cloud.stream.kafka.streams.bindings.dayAggregationOutput.producer.value-serde=com.justin.visitor.aggregation.VisitorCountSerDer


spring.cloud.stream.bindings.kafkaOutput.destination=visitor_faces
spring.cloud.stream.bindings.kafkaOutput.producer.key.serializer = org.apache.kafka.common.serialization.StringSerializer

# Sink configuration
spring.cloud.stream.bindings.mqttSinkInput.destination=${MQTT_SINK_TOPIC:visitor_analysis_info}
spring.cloud.stream.bindings.mqttSinkInput.group=${MQTT_SINK_CONSUMER_GROUP:visitor_analysis_to_mqtt}
spring.cloud.stream.kafka.binder.brokers=${BROKERS:192.168.1.11}
mqtt.brokerUrl=${MQTT_BROKER:tcp://192.168.1.31:1883}
mqtt.username=${MQTT_USER:guest}
mqtt.password=${MQTT_USER:guest}
mqtt.visitorEntryTopic=${MQTT_SINK_OUTPUT_TOPIC:visitor/analysis}